//NOTE:  Variable declaration
let a = 22

//NOTE: Function declaration
fn add(a, b) {
  print a + b
}

//NOTE:  First class function
let addFunc = add

//NOTE: Function call
addFunc(4, 5)
add(3, 4)

print "HI"
print 3 * 4

if 1 != 1  {
  print "Dummy"
} else {
  print ":)"
}

let sum = 0

for i = 1; i < 3; i = i + 1 {
  sum = sum + i
}

print sum

let j = 1

//NOTE: Go-like while loop - baked while loop into for-statment
for ;j < 10; {
  print "j = " + j
  j = j + 1
}

//NOTE: Infinite-loop
// for ;; {
//   print "working..."
// }

let a = "a"
let b = "b"
let c = "c"
a = b = c
print a + b + c // 'ccc'

let x = 1
{
    let x = 2
    print x // 2
}
print x // 1

let a = "global"
{
    fn showA() {
     print a
    }

    showA()
    let a = "block"
    showA() // global
}

// Function with return statement
fn add(a, b, c) {
    return a + b + c
}

let result = add(10, 20, 30)
print result
print add(1, 2, 3)

print false and true //false
print true or false //true

class A {}

print A // <class A>

let a = A()
print a // <instance a>

class Chocolate {
  eat() {
    print "Yum Yummy"
  }
}

Chocolate().eat()

class B {}

fn notClassFunction(argument) {
  print "notClassFunction called with argument [" + argument + "]"
}

let b = B()
b.function = notClassFunction
b.function("argument")

class Person {
  init() {
    self.name = "human"
    self.age = 30
  }
  printName() {
      print self.name
  }
}

let rust = Person()
//rust.name = "RUST"
rust.printName() // human
print rust.age // 30

rust.name = "RUST"
rust.printName() // RUST

// Inheritance
class Meal {
  cook() {
    print "cooking..."
  }
}

class Meat : Meal {
  cook() {
    super.cook()
    print "GRILLED MEAT with VEGGIES"
  }
}

Meat().cook()


//fib
fn fib(n) {
    if n < 2 {
       return n
    }
    return fib(n-1) + fib(n-2)
}

let before = time()
print fib(40)
let after = time()
let duration = after - before

print "Duration = " + duration + "ms"